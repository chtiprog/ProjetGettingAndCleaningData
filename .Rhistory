install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
c
quit()
swirl()
install.packages("swirl")
library(swirl)
swirl()
View(flags)
View(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
(flags, class)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpoi(5, mean = 10)
rpois(5, mean = 10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMean(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1960-01-01")
d2 <- as.Date("1969-01-01")
unclass()
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "dqys")
difftime(Sys.time(), t1, units = 'dqys')
difftime(Sys.time(), t1, units = 'dqys')
difftime(Sys.time(), t1, units = 'days')
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submi()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("rJava",type='source')
library(xlsx)
library(rJava)
library(rjava)
library(rJava)
library(xlsx)
library(rJava)
library(rJava)
library(rJava)
install.packages(rJava)
install.packages("rJava")
library(rJava)
install.packages("rJava", type="mac.binary")
install.packages("RMySQL")
library(RMySQL)
?dbConnect
connection <- dbConnect(MySQL())
db <- dbGetQuery(connection, "show databases;")
db
connection <- dbConnect(MySQL(), user="root", host="127.0.0.1")
db <- dbGetQuery(connection, "show databases;")
db
connection <- dbConnect(MySQL(), user="root", db = "FirstSchema", host="127.0.0.1")
db <- dbGetQuery(connection, "show databases;")
db
table <- dbListTables(FirstSchema)
connection <- dbConnect(MySQL(), user="root", db="FirstSchema",host="127.0.0.1")
table <- dbListTables(FirstSchema)
connection <- dbConnect(MySQL(), user="root", db="MyFirstConnection",host="127.0.0.1")
connection <- dbConnect(MySQL(), user="root", db="FirstSchema",host="127.0.0.1")
db <- dbGetQuery(connection, "show databases;")
db
?dbListTables
table <- dbListTables(connection)
length(table)
table
dbListFields(connexion, "FirstTable")
dbListFields(table, "FirstTable")
dbListFields(connection, "FirstTable")
dbGetQuery(connection, "select count(*) from FirsTable")
dbGetQuery(connection, "select count(*) from FirstTable")
data <- dbReadTable(connection, "FirstTable")
data
?dbGetQuery
requete <- dbSendQuery(connection, "select * from FirstTable where Adresse = Paris")
requete <- dbSendQuery(connection, "select * from FirstTable where Adresse == Paris")
requete <- dbSendQuery(connection, "select * from FirstTable where Adresse = 'Paris' ")
requete
affRequete <- fetch(requte)
affRequete <- fetch(requete)
affRequete
affRequete$Name
requete2 <- dbGetQuery(connection, "select * from FirstTable where Adresse = 'Paris' ")
requete2
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(fileUrl, destfile = "Q2Quiz2.csv", method = "curl")
library(sqldf)
acs <- read.csv("Q2Quiz2.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
class(acs)
name(acs)
names(acs)
head(acs)
sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
names(acs)
unique(acs$AGEP)
uniq <- unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
q3option1 <- sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
sqldf("select unique * from acs")
?nchar
adresse <- "http://biostat.jhsph.edu/~jleek/contact.html
"
adresse <- url("http://biostat.jhsph.edu/~jleek/contact.html")
)
adresse = url("http://biostat.jhsph.edu/~jleek/contact.html")
)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
class(htmlCode)
?nchar
x <- nchar(htmlCode)
x[10]
x[20]
x[30]
x[100]
con2 = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode2 = readLines(con2)
con2 = url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode2 = readLines(con2)
class(htmlCode2)
close(con2)
htmlCode2
setwd()
getwd()
setwd("/Users/spellart/Documents/ProjetGettingAndCleaningData/")
list.files()
testData <- read.table("X_train.txt")
testData <- read.table("X_test.txt")
class(testData)
head(testData)
list.files()
features <- read.table("features.txt")
View(features)
colNames(features)
colnames(features)
colonnesNames <- features$V2
length(colnames)
length(colonnesNames)
colnames(testData) <- colonnesNames
head(testData)
list.files
list.files()
trainData <- read.table("X_train.txt")
source('~/Documents/ProjetGettingAndCleaningData/run_analysis.R')
View(testSet)
View(trainSet)
?rbind
View(testSet)
